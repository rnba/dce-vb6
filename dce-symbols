#!/usr/bin/sed -Esf
#
# each line of output represents a file-level
# (module-, class-level) definition from input.
# does not grok raw VB6 code, requires output
# of dce-comments -e boiled.
# ignores #If compiler directives.

b main

# routines ##################
:lexerr
s/^/dce-symbols: bad input: /
w /dev/stderr
Q 1

:incomplete
g; s/^\x1f([^\x1f]+)\x1f([^\x1f]+)/\2 \1/
s/.*/error: '&' without an 'end' statement/
w /dev/stderr
Q 1

:body
s/(\x1f[^\x1f]+).*/\1/
$ b incomplete
N;
/\n\x1e/! b lexerr
/\x15.+/  b lexerr
/\x15$/!  b lexerr
s/\n\x1e//
# (Abc)\1 matches "AbcAbc".
/^\x1f(\w+)\x1f(End)\x1f\1/I {
  # "\x1fFunction\x1fEnd\x1fFunction"
  z; x;
  b print
}
g; b body

:main

/^\x1e/!  b lexerr
/\x15.+/  b lexerr
/\x15$/!  b lexerr

s/^\x1e(.*)\x15$/\1/

/^(\x1fAttribute)(\x1f[^\x1f]+).*\>/I d
/^(\x1fOption)(\x1f[^\x1f]+).*\>/I d

/^\x1f(Public|Private|Static)\>/I s///

/^(\x1f(Function|Sub|Enum|Type))(\x1f[^\x1f]+).*/I {
  s//\1\3/; h;
  b body
}

/^(\x1fProperty)(\x1f[GLS]et)(\x1f\w+).*/I {
  s//\1\2\3/; h;
  b body
}

/^\x1f(Declare)\x1f(Function|Sub)\x1f(\w+).*/I {
  s//\1 \2 \3/
  b print
}

/^\x1f(Event)\x1f(\w+).*/I {
  s//\1 \2/
  b print
}

/^\x1f(Const)\x1f(\w+).*/I {
  s//\1 \2/
  b print
}

/^(\x1fDim)?\x1f(\w+).*/I {
  s//var \2/
  b print
}

d

:print
s/\x1f([^\x1f]+)/ \1/g
s/^ //

s/^(.+) (\w+)$/\L\1\E \2/
s/\<function\>/fun/
s/^property /p/
s/^declare /d/

s/^f./1 &/
s/^s./1 &/
s/^p./1 &/
s/^en/2 &/
s/^t./3 &/
s/^ev/4 &/
s/^d./4 &/
s/^c./5 &/
s/^v./5 &/

